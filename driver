#!/usr/bin/python3
import datetime
import random
from typing import List
from typing import Optional
from sqlalchemy import create_engine, Column, Integer, String, select
from sqlalchemy.orm import Mapped, mapped_column, relationship, DeclarativeBase, Session

TIME = datetime.datetime.now()

# Create an engine to connect to the database
engine = create_engine("postgresql+psycopg2://admin:p0stdev@0.0.0.0")

# Create the base class as a subclass of DB class
class Base(DeclarativeBase):
    pass

class Strength(Base):
    
    __tablename__ = "strength_training"

    id: Mapped[int] = mapped_column(primary_key=True)
    date: Mapped[int] 
    exercise: Mapped[str] = mapped_column(String(30))
    sets: Mapped[int]
    reps: Mapped[int]
    weight: Mapped[Optional[int]]
   
    def __repr__(self) -> str:
        return f"Strength(id={self.id!r},date={self.date!r},exercise={self.exercise!r},sets={self.sets!r},reps={self.reps!r},weight={self.weight!r})"

class Endurance(Base):
    
    __tablename__ = "endurance_training"

    id: Mapped[int] = mapped_column(primary_key=True)
    date: Mapped[int]
    exercise: Mapped[str] = mapped_column(String(30))
    time: Mapped[int]
    distance: Mapped[int]
   
    def __repr__(self) -> str:
        return f"Endurance(id={self.id!r},date={self.date!r},exercise={self.exercise!r},time={self.time!r},distance={self.distance!r})"

# Create the Tables with the metadata and engine

Base.metadata.create_all(engine)

# Exercise input validation

def exercise_validation(pick_table):
    
    if pick_table == 'Strength':
        exercise_list=['benchpress','barbell_squat','barbell_curl']
    else:
        exercise_list=['road_run','trail_run','road_bike','mountain_bike','swim']
    while True:
        a = input("Enter Exercise name: ")
        if a in exercise_list:
            return a
        print(f"'{a}' not a valid exercise for this database")
        print("Valid exercise names:\n")
        for i in exercise_list:
            print(i)
    
def int_validation(msg):
   
    while True:
        print(msg)
        a = input() 
        try:
            int(a)
            return a
        except Exception as e:
            print(f"expected datatype int got '{type(a)}'")

def flt_validation(msg):

    while True:
        print(msg)
        a = input()
        try:
            float(a)
            breakpoint()
            return a
        except Exception as e:
            print(f"expected datatype float got '{type(a)}'") 
     
# Insert data
def insert(*args,**kwargs):

    pick_table = input("Which type of Exercise would you like to add [ Strength | Endurance ]: ") 
    if pick_table == 'Strength':

        with Session(engine) as session:
            entry = Strength(
                exercise=exercise_validation(pick_table),
                date=TIME.strftime("%Y%M%d"),
                sets=int_validation(msg="Enter # of Sets: "),
                reps=int_validation(msg="Enter # of Reps: "),
                weight=int_validation(msg="Enter # of Weight: ")
            )
            session.add_all([entry])
            session.commit()

    elif pick_table == 'Endurance':

        with Session(engine) as session:
            entry = Endurance(
                exercise=exercise_validation(pick_table),
                date=TIME.strftime("%Y%M%d"),
                time=int_validation(msg="Enter total minutes: "),
                distance=flt_validation(msg="Enter total miles: ")
            )
            session.add_all([entry])
            session.commit()
    else:
        print(f"Expected 'Strength' or 'Endurance' got '{pick_table}'")
        insert(*args,**kwargs)
insert()

def retrieve():
    
    pick_table = input("Table to Retrieve [ Strength | Endurance ]:")   

    try:
        with Session(engine) as session:
            result = session.execute(select(text(pick_table)).order_by(pick_table.id))
            for i in result.all():
                print(i)
    except Exception as e:
        print(e)
    
    retrieve()
retrieve()
